@using BaseEAM.Services.Security
@model RequestForQuotationItemModel
@{
    var defaultGridPageSize = EngineContext.Current.Resolve<BaseEAM.Core.Domain.GeneralSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<BaseEAM.Core.Domain.GeneralSettings>().GridPageSizes;
    var primarySystemCurrencySymbol = EngineContext.Current.Resolve<BaseEAM.Core.IWorkContext>().WorkingCurrency.CurrencySymbol;

    var permissionService = EngineContext.Current.Resolve<BaseEAM.Services.IPermissionService>();
    var allowCreate = permissionService.Authorize(StandardPermissionName.Purchasing_RequestForQuotation_Create);
    var allowRead = permissionService.Authorize(StandardPermissionName.Purchasing_RequestForQuotation_Read);
    var allowUpdate = permissionService.Authorize(StandardPermissionName.Purchasing_RequestForQuotation_Update);
    var allowDelete = permissionService.Authorize(StandardPermissionName.Purchasing_RequestForQuotation_Delete);
}
<div id="group-requestForQuotationItems" class="panel-group" data-bind="visible: !isNew()">
    <div class="panel panel-default">
        <div class="panel-heading">
            <button type="button" id="createRequestForQuotationItem" class="btn btn-primary@(allowCreate || allowUpdate ? "" : " none-display")" title="@T("Common.AddNew")">
                <i class="fa fa-plus-square"></i>
            </button>
            <button type="button" id="createRequestForQuotationItems" class="btn btn-primary@(allowCreate || allowUpdate ? "" : " none-display")" title="@T("Common.AddMultiple")">
                <i class="fa fa-angle-double-down"></i>
            </button>
            <button type="button" id="deleteSelectedRequestForQuotationItems" class="btn btn-primary@(allowCreate || allowUpdate ? "" : " none-display")" title="@T("Common.Delete.Selected")">
                <i class="fa fa-trash-o"></i>
            </button>            
        </div>
        <div class="panel-body">
            <div id="requestForQuotationItems-grid"></div>
            <script>
                var gridCheckboxHandler = new BaseEam.CheckBoxHandler('requestForQuotationItems-grid');
                gridCheckboxHandler.init();

                $(document).ready(function () {
                    $("#requestForQuotationItems-grid").kendoGrid({
                        dataSource: {
                            type: "json",
                            transport: {
                                read: {
                                    url: "@Html.Raw(Url.Action("RequestForQuotationItemList", "RequestForQuotation"))",
                                    type: "POST",
                                    dataType: "json",
                                    data: additionalData
                                },
                                parameterMap: function(data, operation) {
                                    sortMapping = [
                                        {
                                            from: "ItemName", to: "Item.Name",
                                            from: "ItemUnitOfMeasureName", to: "Item.UnitOfMeasure.Name"
                                        }
                                    ];
                                    BaseEam.Grid.mapSortColumns(data.sort, sortMapping);
                                    return data;
                                }
                            },
                            schema: {
                                data: "Data",
                                total: "Total",
                                errors: "Errors",
                                model: {
                                    id: "Id"
                                }
                            },
                            error: function(e) {
                                display_kendoui_grid_error(e);
                                // Cancel the changes
                                this.cancelChanges();
                            },
                            pageSize: @(defaultGridPageSize),
                            serverPaging: true,
                            serverFiltering: true,
                            serverSorting: true
                        },
                        pageable: {
                            refresh: true,
                            pageSizes: [@(gridPageSizes)],
                            @Html.Partial("_GridPagerMessages")
                        },
                        sortable: true,
                        editable: false,
                        scrollable: false,
                        dataBound: function(e) {
                            gridCheckboxHandler.onDataBound(e);
                        },
                        columns: [{
                            field: "Id",
                            headerTemplate: "<input id='requestForQuotationItems-grid-mastercheckbox' type='checkbox'/>",
                            headerAttributes: { style: "text-align:center" },
                            attributes: { style: "text-align:center" },
                            template: "<input type='checkbox' value='#=Id#' class='checkboxGroups'/>",
                            width: 50,
                            sortable: false
                        },{
                            field: "Sequence",
                            title: "@T("Common.Sequence")"
                        },{
                            field: "ItemName",
                            title: "@T("Item")"
                        },{
                            field: "ItemUnitOfMeasureName",
                            title: "@T("UnitOfMeasure")"
                        },{
                            field: "QuantityRequested",
                            title: "@T("RequestForQuotationItem.QuantityRequested")",
                            template: '#= QuantityRequested != null ? kendo.toString(QuantityRequested, "n") : "" #'
                        }, {
                            field: "Id",
                            headerTemplate: "",
                            width: 100,
                            template: '<button type="button" class="btn btn-primary@(allowRead || allowUpdate ? "" : " none-display")" onclick="editRequestForQuotationItem(event, #=Id#);"></span><i class="fa fa-pencil aria-hidden="true""></i></a>' +
                                    '<button type="button" class="deleteRow btn btn-primary@(allowDelete ? "" : " none-display")" onclick="deleteRequestForQuotationItem(event, #=Id#);"></span><i class="fa fa-trash aria-hidden="true""></i></a>',
                            sortable: false
                        }]
                    });
                });
            </script>
        </div>
    </div>
</div>

<script type="text/javascript">
    function createRequestForQuotationItems(e) {
        e.preventDefault();
        BaseEam.Grid.saveChanges('@Url.Action("CreateRequestForQuotationItems", "RequestForQuotation")', '#createRequestForQuotationItems-grid', '#createRequestForQuotationItems-error', false);
    };

    function editRequestForQuotationItem(e, id){
        e.preventDefault();
        //check if panel-requestForQuotationItem is open => close it before edit
        if($('#panel-requestForQuotationItem').is(":visible")){
            togglePanelRequestForQuotationItem(false);
        }

        var postData = {
            id : id
        };
        addAntiForgeryToken(postData);

        $.ajax({
            cache: false,
            type: "POST",
            url: "@(Url.Action("RequestForQuotationItem", "RequestForQuotation"))",
            data: postData,
            success: function(data) {
                //append html
                $("#group-requestForQuotationItems").append(data.Html);

                //apply binding for the newly generated element
                ko.applyBindings(viewModel, $("#panel-requestForQuotationItem")[0]);

                //then toggle the panel
                togglePanelRequestForQuotationItem(true);
            },
            error: function(xhr, ajaxOptions, thrownError) {
                showBSModal({title: 'ERROR', body: thrownError});
            },
            traditional: true
        });
    };

    function deleteRequestForQuotationItem(e, id){
        e.preventDefault();
        //check if panel-requestForQuotationItem is open => close it before delete
        if($('#panel-requestForQuotationItem').is(":visible")){
            togglePanelRequestForQuotationItem(false);
        }

        BaseEam.Grid.deleteRow($("#Id").val(), id, "@Url.Action("DeleteRequestForQuotationItem", "RequestForQuotation")", "requestForQuotationItems-grid", "", true);
    };

    function additionalData() {
        var data = {
            requestForQuotationId: $("#Id").val()
        };
        addAntiForgeryToken(data);
        return data;
    }

    function togglePanelRequestForQuotationItem(editmode) {
        if (editmode) {
            $('#panel-requestForQuotationItem').show();
            $('#createRequestForQuotationItem').hide();
            $('#createRequestForQuotationItems').hide();
            $('#deleteSelectedRequestForQuotationItems').hide();
        }
        else {
            ////remove the panel html so we won't care
            //about dirty change tracking for newly added input tag
            $('#panel-requestForQuotationItem').remove();
            $('#createRequestForQuotationItem').show();
            $('#createRequestForQuotationItems').show();
            $('#deleteSelectedRequestForQuotationItems').show();
        }
    }

    $(document).ready(function () {
        $("#createRequestForQuotationItem").click(function(e){
            e.preventDefault();
            var postData = {
                requestForQuotationId : $("#Id").val()
            };
            addAntiForgeryToken(postData);

            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("CreateRequestForQuotationItem", "RequestForQuotation"))",
                data: postData,
                success: function(data) {
                    //append html
                    $("#group-requestForQuotationItems").append(data.Html);

                    //then toggle the panel
                    togglePanelRequestForQuotationItem(true);
                },
                error: function(xhr, ajaxOptions, thrownError) {
                    showBSModal({title: 'ERROR', body: thrownError});
                },
                traditional: true
            });
        });

        $("#createRequestForQuotationItems").click(function(e){
            e.preventDefault();
            $.get('@Url.Action("CreateRequestForQuotationItemsView", "RequestForQuotation")', function(data) {
                showBSModal({
                    title: "@T("Common.AddMultiple")",
                    size: "large",
                    body: data,
                    actions: [{
                        label: '@T("Common.Save")',
                        cssClass: 'btn-success',
                        onClick: createRequestForQuotationItems
                    },{
                        label: '@T("Common.Cancel")',
                        cssClass: 'btn-danger',
                        onClick: function(e){
                            $(e.target).parents('.modal').modal('hide');
                        }
                    }]
                });
            });
        });

        $("#deleteSelectedRequestForQuotationItems").click(function(e){
            e.preventDefault();
            BaseEam.Grid.deleteSelectedRows($("#Id").val(), gridCheckboxHandler.selectedIds, "@Url.Action("DeleteSelectedRequestForQuotationItems", "RequestForQuotation")", "requestForQuotationItems-grid", "", true);
        });

        window.EventBroker.subscribe("grid_batch_saved", function (message, data) {
            //hide modal popup
            $('.modal').modal('hide');

            //refresh grid
            var grid = $('#requestForQuotationItems-grid').data('kendoGrid');
            grid.dataSource.page(1);
        });        
    });
</script>